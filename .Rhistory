library(splines)
library(glmnet)
library(glinternet)
library(hierNet)
library(magrittr)
library(dplyr)
gk_7 <- "+proj=tmerc +lat_0=0 +lon_0=21 +k=0.9999 +x_0=7500000 +y_0=0 +ellps=bessel +towgs84=574.027,170.175,401.545,4.88786,-0.66524,-13.24673,0.99999311067 +units=m"
utm <- "+proj=utm +zone=34 +ellps=GRS80 +towgs84=0.26901,0.18246,0.06872,-0.01017,0.00893,-0.01172,0.99999996031 +units=m"
load(paste(getwd(),"inst","extdata","gridmaps.RDa",sep="/"))
gridmaps.sm2D$CD<-exp(-gridmaps.sm2D$DirDif)
gridmaps.sm2D$DD<-as.numeric(exp(-scale(gridmaps.sm2D$Dist,center=FALSE)))
bor <- join(read.csv(paste(getwd(),"inst","extdata","Profili_sredjeno_csv.csv",sep="/")), read.csv(paste(getwd(),"inst","extdata","Koordinate_csv.csv",sep="/")), type="inner")
bor$hdepth<-bor$Bottom-bor$Top
bor$altitude <- - (bor$Top / 100 + (( bor$Bottom - bor$Top ) / 2) / 100)
bor <- bor[, - c( 7:12,14,15,16,17 )]
names(bor) <- c("Soil.Type","ID","Horizont","Top" , "Bottom","pH","Humus","As","Co","x","y","hdepth","altitude")
bor.xy <- bor[complete.cases(bor[,c("ID","x","y","altitude","As")]),c("ID","x","y","hdepth","altitude","As")]
bor.xy <- plyr::rename(bor.xy, replace=c("x" = "longitude", "y" = "latitude"))
coordinates(bor.xy) <- ~ longitude + latitude
proj4string(bor.xy) <- CRS(utm)
bor.xy <- spTransform(bor.xy, CRS(gk_7))
sm2D.lst<-names(gridmaps.sm2D)
#=========== Overlay with covariates (gridmaps.sm2D) ================================
ov.bor <- over(bor.xy, gridmaps.sm2D)
bor.xy@data[,c(sm2D.lst)] <- ov.bor
str(bor.xy)
bor.df <- data.frame(bor.xy)
bor.df <- bor.df[complete.cases(bor.df[,names(bor.df)]),] # Uvek razmisiti kod ove funkcije
str(bor.df)
#============== Removing correlated covariates (previously determined) ==============
names(bor.df)
bor.df<-bor.df[,-which(names(bor.df) %in% c("DirDif","Dist","AnalyticalHills","LSFactor","RelSlopePosition","VelleyDepth","optional"))]
str(bor.df)
bor.df<-bor.df[-which(bor.df$ID %in% c(66,129,14,51,69,130,164,165,166)),]
#============== Sorting by altitude =================================================
bor.df<-ddply(bor.df,.(altitude))
bor.df <- bor.df[order(-bor.df$altitude),]
head(bor.df)
names(bor.df)
sm2D.lst<-names(bor.df)[c(5:23)]
penint3D<-function(fun,regdat,contVar,flist,hier=TRUE,lambda=seq(0,5,0.1),int=TRUE,depth.fun=list("linear","nspline","poly"),df=4,deg=3,preProc=TRUE){
if(hier==TRUE){int=TRUE}
if(int == FALSE){hier = FALSE}
tvar<-as.character(fun)[2]
covs<-gsub("[[:space:]]", "", as.character(fun)[3])
covs<-unlist(strsplit(covs, "+", fixed = TRUE))
#depth<-covs[length(covs)]
#covs<-covs[-length(covs)]
depth.fun<-depth.fun[[1]]
if(preProc==TRUE){
regdat[,c(contVar)]<-apply(regdat[,c(contVar)],2,scale)
}
if(depth.fun=="nspline"){fun <- as.formula(paste(tvar, "~" ,paste(c(covs,"ns(altitude,df=4)"), collapse="+"),sep=""))
} else {if(depth.fun =="poly") {fun <- as.formula(paste(tvar, "~" ,paste(c(covs,"poly(altitude,3)"), collapse="+"),sep=""))}
else {fun <- fun} # OVde treba ubaciti izbacivanje altituda kao main effect ako postoji poly i ns
}
modmat <- model.matrix(fun ,regdat)[,-1]
# removing nzv varaibles
nzv <- nearZeroVar(modmat)
if(sum(nzv)!=0){modmat <- modmat[, -nzv]}else{modmat<-modmat}
colnames(modmat)<-gsub(" ",".",colnames(modmat))
colnames(modmat)<-gsub("\\(altitude,.df.=.4\\)","",colnames(modmat))
colnames(modmat)<-gsub("\\(altitude,.3\\)","",colnames(modmat))
if(int & !hier){
X <- hierNet::compute.interactions.c(modmat,diagonal=FALSE)
if(depth.fun == "nspline"){columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude")) %>% select(-contains("ns"))  %>% colnames())
} else {if(depth.fun =="poly") {columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude")) %>% select(-contains("poly"))  %>% colnames())}
else {columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude"))  %>% colnames())}
}
if(depth.fun =="nspline"){modmat <- cbind((modmat %>% as.data.frame() %>% select(-altitude) %>% select(-contains("ns")) %>% as.matrix()),X[,colnames(X) %in% columns.to.keep],(modmat %>% as.data.frame() %>% select(contains("ns")) %>% as.matrix()))
} else {if(depth.fun =="poly") {modmat <- cbind((modmat %>% as.data.frame() %>% select(-altitude) %>% select(-contains("poly")) %>% as.matrix()),X[,colnames(X) %in% columns.to.keep],(modmat %>% as.data.frame() %>% select(contains("poly")) %>% as.matrix()))}
else {modmat <- cbind(modmat,X[,colnames(X) %in% columns.to.keep])}
}
} else { if(hier) {
X <- hierNet::compute.interactions.c(modmat,diagonal=FALSE)
"%ni%" <- Negate("%in%")
if(depth.fun == "nspline"){columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude")) %>% select(-contains("ns"))  %>% colnames())
} else {if(depth.fun == "poly") {columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude")) %>% select(-contains("poly"))  %>% colnames())}
else {columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude"))  %>% colnames())}
}
X[,colnames(X) %ni% columns.to.keep ] <- 0
} else {
if(depth.fun =="nspline"){modmat <- cbind((modmat %>% as.data.frame() %>% select(-altitude) %>% as.matrix()))
} else {if(depth.fun =="poly") {modmat <- cbind((modmat %>% as.data.frame() %>% select(-altitude) %>% as.matrix()))}
else {modmat <- modmat}
}
}
}
if(!hier){
allData<-cbind(tvar=regdat[,paste(tvar)],modmat,regdat[,c("ID","longitude","latitude")])
#names(allData)<-gsub("\\(altitude,.df.=.4\\)","",names(allData))
results<-data.frame(lambda=rep(NA,length(flist)+1),RMSE=rep(NA,length(flist)+1),Rsquared=rep(NA,length(flist)+1))
coef.list=as.list(rep(NA,length(strat)))
pred<-data.frame()
for(i in 1:length(flist)){
ind<-which(allData$ID %in% do.call(c,flist[-i]))
TrainData<-as.data.frame(do.call(cbind,allData[ind,]))
Train.ID.index<-flist[-i]
TestData<-as.data.frame(do.call(cbind,allData[-ind,]))
Test.ID.Index<-flist[i]
folds1<-length(Train.ID.index)
folds.list1<-as.list(rep(NA,folds1))
names(folds.list1)<-paste("fold",c(1:folds1),sep = "")
foldid<-rep(NA,dim(TrainData)[1])
for(j in 1:length(Train.ID.index)){
folds.list1[[j]]<-which(TrainData$ID %in% Train.ID.index[[j]])
foldid[folds.list1[[j]]]<-j
}
TrainData<-TrainData[,1:(dim(TrainData)[2]-3)] # ovo mora da se menja...ne sme da stoji tri vec moraju da se uklone poslednje tri kolone lepse
TestData<-TestData[,1:(dim(TestData)[2]-3)]
#lambdaGrid <- seq(0,2.5,0.05)#10^seq(10,-2, length =100)
lasso.mod=cv.glmnet(as.matrix(TrainData[,-1]),TrainData[,1],alpha=1,lambda=lambda,foldid=foldid,type.measure="mse")
lasso.pred<-predict(lasso.mod,s=lasso.mod$lambda.min,newx=as.matrix(TestData[,-1]))
obs.pred<-data.frame(obs=TestData[,1],pred=as.numeric(lasso.pred))
coef.list[[i]]<-predict(lasso.mod,type="coefficients",s=lasso.mod$lambda.min)
dfresults<-data.frame(lambda=lasso.mod$lambda.min,RMSE=defaultSummary(obs.pred)[1],Rsquared=defaultSummary(obs.pred)[2])
results[i,]<-dfresults
pred<-rbind(pred,obs.pred)
}
results[length(flist)+1,]<-c(NA,RMSE=defaultSummary(pred)[1],Rsquared=defaultSummary(pred)[2])
coef.mat<-do.call(cbind,coef.list)
out<-list(measure=results,coef=coef.mat)
return(out)
}else{
allData<-cbind(tvar=regdat[,paste(tvar)],modmat,X,regdat[,c("ID","longitude","latitude")])
#names(allData)<-gsub("\\(altitude,.df.=.4\\)","",names(allData))
#head(allData)
results<-data.frame(lambda=rep(NA,length(flist)+1),RMSE=rep(NA,length(flist)+1),Rsquared=rep(NA,length(flist)+1))
coef.list=as.list(rep(NA,length(flist)))
pred<-data.frame()
for(i in 1:length(flist)){
ind<-which(allData$ID %in% do.call(c,flist[-i])) # izdvajaje indeksa instanci koje pribadaju foldovima za trening
TrainData<-as.data.frame(do.call(cbind,allData[ind,])) # izdvajanje trening podacima
Train.ID.index<-flist[-i] # Izdvajanje dela liste foldova sa  trening podacima
TestData<-as.data.frame(do.call(cbind,allData[-ind,])) #Izdvajanje test podataka
Test.ID.Index<-flist[i] # Izdvajanje dela liste foldova sa test podacima
folds1<-length(Train.ID.index) # duzina liste foldova sa trening podacima (tj. koliko foldova ide u tu listu)
folds.list1<-as.list(rep(NA,folds1)) # kreiranje prazne liste iste duzine
names(folds.list1)<-paste("fold",c(1:folds1),sep = "") # Nazivanje svakog clana liste po foldu...
foldid<-rep(NA,dim(TrainData)[1]) # kreiranje atributa koji ce nositi informaciju kom foldu pripada podatak
for(j in 1:length(Train.ID.index)){
folds.list1[[j]]<-which(TrainData$ID %in% Train.ID.index[[j]])
foldid[folds.list1[[j]]]<-j
}
trainx <- as.matrix(TrainData[,colnames(modmat)])
testx <- as.matrix(TestData[,colnames(modmat)])
trainzz <- as.matrix(TrainData[,colnames(X)])
testzz <- as.matrix(TestData[,colnames(X)])
trainy <- (TrainData[,"tvar"])
testy <- (TestData[,"tvar"])
fit = hierNet.path(trainx,trainy, zz = trainzz,diagonal=FALSE,strong=TRUE,trace=0)
fitcv = hierNet.cv(fit, trainx, trainy, folds=folds.list1, trace=0)
fit.def <- hierNet(trainx,trainy, zz = trainzz,diagonal=FALSE,strong=TRUE,lam=fit$lamlist[which(fitcv$lamhat==fit$lamlist)])
fit.pred <- predict(fit.def,newx=testx,newzz = testzz)
ie <- as.matrix(fit$th[,,which(fitcv$lamhat==fit$lamlist)][,length(colnames(modmat))])
me<-fit$bp[,which(fitcv$lamhat==fit$lamlist), drop = F] - fit$bn[,which(fitcv$lamhat==fit$lamlist), drop = F]
rbind(ie,me)
obs.pred <- data.frame(obs=testy,pred=fit.pred)
coef.list[[i]]<-rbind(ie,me)
dfresults<-data.frame(lambda=fitcv$lamhat,RMSE=defaultSummary(obs.pred)[1],Rsquared=defaultSummary(obs.pred)[2])
results[i,]<-dfresults
pred<-rbind(pred,obs.pred)
}
results[length(flist)+1,]<-c(NA,RMSE=defaultSummary(pred)[1],Rsquared=defaultSummary(pred)[2])
coef.mat<-do.call(cbind,coef.list)
out<-list(measure=results,coef=coef.mat)
return(out)
}
}
source(paste(getwd(),"R","stratFold3D.R",sep="/"))
sm2D.lst
fun<-as.formula(paste("As ~", paste(c(sm2D.lst,"altitude"), collapse="+")))
regdat<-bor.df
contVar<-sm2D.lst[-which(sm2D.lst %in% c("clc","SoilType"))]
targetVar<-"As"
detach("package:dplyr", unload=TRUE)
strat<-stratfold3d(targetVar="As",seed=123,regdat=regdat,folds=6,cent=3,dimensions="2D",IDs=FALSE,sum=TRUE)
flist<-strat$folds
#plotfolds(strat,"pH")
library(dplyr)
rez<-penint3D(fun=fun,regdat=regdat,hier = FALSE,lambda=10^seq(-5,5,length=110),contVar=contVar,int=FALSE,flist=flist,depth.fun="poly")
rez
rez<-penint3D(fun=fun,regdat=regdat,hier = FALSE,lambda=10^seq(-5,5,length=110),contVar=contVar,int=FALSE,flist=flist,depth.fun="linear")
rez
summary(rez$measure[1:6,])
rezint<-penint3D(fun=fun,regdat=regdat,hier = FALSE,lambda=10^seq(-5,5,length=110),contVar=contVar,int=TRUE,flist=flist,depth.fun="linear")
rezint
rez
rezint
head(regdat)
tvar<-as.character(fun)[2]
covs<-gsub("[[:space:]]", "", as.character(fun)[3])
covs<-unlist(strsplit(covs, "+", fixed = TRUE))
depth.fun="nspline"
if(depth.fun=="nspline"){fun <- as.formula(paste(tvar, "~" ,paste(c(covs,"ns(altitude,df=4)"), collapse="+"),sep=""))
} else {if(depth.fun =="poly") {fun <- as.formula(paste(tvar, "~" ,paste(c(covs,"poly(altitude,3)"), collapse="+"),sep=""))}
else {fun <- fun} # OVde treba ubaciti izbacivanje altituda kao main effect ako postoji poly i ns
}
fun
modmat <- model.matrix(fun ,regdat)[,-1]
# removing nzv varaibles
nzv <- nearZeroVar(modmat)
if(sum(nzv)!=0){modmat <- modmat[, -nzv]}else{modmat<-modmat}
colnames(modmat)<-gsub(" ",".",colnames(modmat))
colnames(modmat)<-gsub("\\(altitude,.df.=.4\\)","",colnames(modmat))
colnames(modmat)<-gsub("\\(altitude,.3\\)","",colnames(modmat))
int=TRUE
hier=TRUE
if(int & !hier){
X <- hierNet::compute.interactions.c(modmat,diagonal=FALSE)
if(depth.fun == "nspline"){columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude")) %>% select(-contains("ns"))  %>% colnames())
} else {if(depth.fun =="poly") {columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude")) %>% select(-contains("poly"))  %>% colnames())}
else {columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude"))  %>% colnames())}
}
if(depth.fun =="nspline"){modmat <- cbind((modmat %>% as.data.frame() %>% select(-altitude) %>% select(-contains("ns")) %>% as.matrix()),X[,colnames(X) %in% columns.to.keep],(modmat %>% as.data.frame() %>% select(contains("ns")) %>% as.matrix()))
} else {if(depth.fun =="poly") {modmat <- cbind((modmat %>% as.data.frame() %>% select(-altitude) %>% select(-contains("poly")) %>% as.matrix()),X[,colnames(X) %in% columns.to.keep],(modmat %>% as.data.frame() %>% select(contains("poly")) %>% as.matrix()))}
else {modmat <- cbind(modmat,X[,colnames(X) %in% columns.to.keep])}
}
} else { if(hier) {
X <- hierNet::compute.interactions.c(modmat,diagonal=FALSE)
"%ni%" <- Negate("%in%")
if(depth.fun == "nspline"){columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude")) %>% select(-contains("ns"))  %>% colnames())
} else {if(depth.fun == "poly") {columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude")) %>% select(-contains("poly"))  %>% colnames())}
else {columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude"))  %>% colnames())}
}
X[,colnames(X) %ni% columns.to.keep ] <- 0
} else {
if(depth.fun =="nspline"){modmat <- cbind((modmat %>% as.data.frame() %>% select(-altitude) %>% as.matrix()))
} else {if(depth.fun =="poly") {modmat <- cbind((modmat %>% as.data.frame() %>% select(-altitude) %>% as.matrix()))}
else {modmat <- modmat}
}
}
}
head(modmat)
?ns
poly(regmat$altitude,3)
poly(modmat$altitude,3)
poly(as.data.frame(modmat)[,"altitude"],3)
poly(as.data.frame(modmat)[,"altitude"],3,raw = TRUE)
penint3D<-function(fun,regdat,contVar,flist,hier=TRUE,lambda=seq(0,5,0.1),int=TRUE,depth.fun=list("linear","nspline","poly"),df=4,deg=3,preProc=TRUE){
if(hier==TRUE){int=TRUE}
if(int == FALSE){hier = FALSE}
tvar<-as.character(fun)[2]
covs<-gsub("[[:space:]]", "", as.character(fun)[3])
covs<-unlist(strsplit(covs, "+", fixed = TRUE))
#depth<-covs[length(covs)]
#covs<-covs[-length(covs)]
depth.fun<-depth.fun[[1]]
if(preProc==TRUE){
regdat[,c("altitude",contVar)]<-apply(regdat[,c("altitude",contVar)],2,scale)
}
if(depth.fun=="nspline"){fun <- as.formula(paste(tvar, "~" ,paste(c(covs,"ns(altitude,df=4)"), collapse="+"),sep=""))
} else {if(depth.fun =="poly") {fun <- as.formula(paste(tvar, "~" ,paste(c(covs,"poly(altitude,3,raw=TRUE)"), collapse="+"),sep=""))}
else {fun <- fun} # OVde treba ubaciti izbacivanje altituda kao main effect ako postoji poly i ns
}
modmat <- model.matrix(fun ,regdat)[,-1]
# removing nzv varaibles
nzv <- nearZeroVar(modmat)
if(sum(nzv)!=0){modmat <- modmat[, -nzv]}else{modmat<-modmat}
colnames(modmat)<-gsub(" ",".",colnames(modmat))
colnames(modmat)<-gsub("\\(altitude,.df.=.4\\)","",colnames(modmat))
colnames(modmat)<-gsub("\\(altitude,.3\\)","",colnames(modmat))
if(int & !hier){
X <- hierNet::compute.interactions.c(modmat,diagonal=FALSE)
if(depth.fun == "nspline"){columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude")) %>% select(-contains("ns"))  %>% colnames())
} else {if(depth.fun =="poly") {columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude")) %>% select(-contains("poly"))  %>% colnames())}
else {columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude"))  %>% colnames())}
}
if(depth.fun =="nspline"){modmat <- cbind((modmat %>% as.data.frame() %>% select(-altitude) %>% select(-contains("ns")) %>% as.matrix()),X[,colnames(X) %in% columns.to.keep],(modmat %>% as.data.frame() %>% select(contains("ns")) %>% as.matrix()))
} else {if(depth.fun =="poly") {modmat <- cbind((modmat %>% as.data.frame() %>% select(-altitude) %>% select(-contains("poly")) %>% as.matrix()),X[,colnames(X) %in% columns.to.keep],(modmat %>% as.data.frame() %>% select(contains("poly")) %>% as.matrix()))}
else {modmat <- cbind(modmat,X[,colnames(X) %in% columns.to.keep])}
}
} else { if(hier) {
X <- hierNet::compute.interactions.c(modmat,diagonal=FALSE)
"%ni%" <- Negate("%in%")
if(depth.fun == "nspline"){columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude")) %>% select(-contains("ns"))  %>% colnames())
} else {if(depth.fun == "poly") {columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude")) %>% select(-contains("poly"))  %>% colnames())}
else {columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude"))  %>% colnames())}
}
X[,colnames(X) %ni% columns.to.keep ] <- 0
} else {
if(depth.fun =="nspline"){modmat <- cbind((modmat %>% as.data.frame() %>% select(-altitude) %>% as.matrix()))
} else {if(depth.fun =="poly") {modmat <- cbind((modmat %>% as.data.frame() %>% select(-altitude) %>% as.matrix()))}
else {modmat <- modmat}
}
}
}
if(!hier){
allData<-cbind(tvar=regdat[,paste(tvar)],modmat,regdat[,c("ID","longitude","latitude")])
#names(allData)<-gsub("\\(altitude,.df.=.4\\)","",names(allData))
results<-data.frame(lambda=rep(NA,length(flist)+1),RMSE=rep(NA,length(flist)+1),Rsquared=rep(NA,length(flist)+1))
coef.list=as.list(rep(NA,length(strat)))
pred<-data.frame()
for(i in 1:length(flist)){
ind<-which(allData$ID %in% do.call(c,flist[-i]))
TrainData<-as.data.frame(do.call(cbind,allData[ind,]))
Train.ID.index<-flist[-i]
TestData<-as.data.frame(do.call(cbind,allData[-ind,]))
Test.ID.Index<-flist[i]
folds1<-length(Train.ID.index)
folds.list1<-as.list(rep(NA,folds1))
names(folds.list1)<-paste("fold",c(1:folds1),sep = "")
foldid<-rep(NA,dim(TrainData)[1])
for(j in 1:length(Train.ID.index)){
folds.list1[[j]]<-which(TrainData$ID %in% Train.ID.index[[j]])
foldid[folds.list1[[j]]]<-j
}
TrainData<-TrainData[,1:(dim(TrainData)[2]-3)] # ovo mora da se menja...ne sme da stoji tri vec moraju da se uklone poslednje tri kolone lepse
TestData<-TestData[,1:(dim(TestData)[2]-3)]
#lambdaGrid <- seq(0,2.5,0.05)#10^seq(10,-2, length =100)
lasso.mod=cv.glmnet(as.matrix(TrainData[,-1]),TrainData[,1],alpha=1,lambda=lambda,foldid=foldid,type.measure="mse")
lasso.pred<-predict(lasso.mod,s=lasso.mod$lambda.min,newx=as.matrix(TestData[,-1]))
obs.pred<-data.frame(obs=TestData[,1],pred=as.numeric(lasso.pred))
coef.list[[i]]<-predict(lasso.mod,type="coefficients",s=lasso.mod$lambda.min)
dfresults<-data.frame(lambda=lasso.mod$lambda.min,RMSE=defaultSummary(obs.pred)[1],Rsquared=defaultSummary(obs.pred)[2])
results[i,]<-dfresults
pred<-rbind(pred,obs.pred)
}
results[length(flist)+1,]<-c(NA,RMSE=defaultSummary(pred)[1],Rsquared=defaultSummary(pred)[2])
coef.mat<-do.call(cbind,coef.list)
out<-list(measure=results,coef=coef.mat)
return(out)
}else{
allData<-cbind(tvar=regdat[,paste(tvar)],modmat,X,regdat[,c("ID","longitude","latitude")])
#names(allData)<-gsub("\\(altitude,.df.=.4\\)","",names(allData))
#head(allData)
results<-data.frame(lambda=rep(NA,length(flist)+1),RMSE=rep(NA,length(flist)+1),Rsquared=rep(NA,length(flist)+1))
coef.list=as.list(rep(NA,length(flist)))
pred<-data.frame()
for(i in 1:length(flist)){
ind<-which(allData$ID %in% do.call(c,flist[-i])) # izdvajaje indeksa instanci koje pribadaju foldovima za trening
TrainData<-as.data.frame(do.call(cbind,allData[ind,])) # izdvajanje trening podacima
Train.ID.index<-flist[-i] # Izdvajanje dela liste foldova sa  trening podacima
TestData<-as.data.frame(do.call(cbind,allData[-ind,])) #Izdvajanje test podataka
Test.ID.Index<-flist[i] # Izdvajanje dela liste foldova sa test podacima
folds1<-length(Train.ID.index) # duzina liste foldova sa trening podacima (tj. koliko foldova ide u tu listu)
folds.list1<-as.list(rep(NA,folds1)) # kreiranje prazne liste iste duzine
names(folds.list1)<-paste("fold",c(1:folds1),sep = "") # Nazivanje svakog clana liste po foldu...
foldid<-rep(NA,dim(TrainData)[1]) # kreiranje atributa koji ce nositi informaciju kom foldu pripada podatak
for(j in 1:length(Train.ID.index)){
folds.list1[[j]]<-which(TrainData$ID %in% Train.ID.index[[j]])
foldid[folds.list1[[j]]]<-j
}
trainx <- as.matrix(TrainData[,colnames(modmat)])
testx <- as.matrix(TestData[,colnames(modmat)])
trainzz <- as.matrix(TrainData[,colnames(X)])
testzz <- as.matrix(TestData[,colnames(X)])
trainy <- (TrainData[,"tvar"])
testy <- (TestData[,"tvar"])
fit = hierNet.path(trainx,trainy, zz = trainzz,diagonal=FALSE,strong=TRUE,trace=0)
fitcv = hierNet.cv(fit, trainx, trainy, folds=folds.list1, trace=0)
fit.def <- hierNet(trainx,trainy, zz = trainzz,diagonal=FALSE,strong=TRUE,lam=fit$lamlist[which(fitcv$lamhat==fit$lamlist)])
fit.pred <- predict(fit.def,newx=testx,newzz = testzz)
ie <- as.matrix(fit$th[,,which(fitcv$lamhat==fit$lamlist)][,length(colnames(modmat))])
me<-fit$bp[,which(fitcv$lamhat==fit$lamlist), drop = F] - fit$bn[,which(fitcv$lamhat==fit$lamlist), drop = F]
rbind(ie,me)
obs.pred <- data.frame(obs=testy,pred=fit.pred)
coef.list[[i]]<-rbind(ie,me)
dfresults<-data.frame(lambda=fitcv$lamhat,RMSE=defaultSummary(obs.pred)[1],Rsquared=defaultSummary(obs.pred)[2])
results[i,]<-dfresults
pred<-rbind(pred,obs.pred)
}
results[length(flist)+1,]<-c(NA,RMSE=defaultSummary(pred)[1],Rsquared=defaultSummary(pred)[2])
coef.mat<-do.call(cbind,coef.list)
out<-list(measure=results,coef=coef.mat)
return(out)
}
}
rez<-penint3D(fun=fun,regdat=regdat,hier = FALSE,lambda=10^seq(-5,5,length=110),contVar=contVar,int=FALSE,flist=flist,depth.fun="poly")
rez
penint3D<-function(fun,regdat,contVar,flist,hier=TRUE,lambda=seq(0,5,0.1),int=TRUE,depth.fun=list("linear","nspline","poly"),df=4,deg=3,preProc=TRUE){
if(hier==TRUE){int=TRUE}
if(int == FALSE){hier = FALSE}
tvar<-as.character(fun)[2]
covs<-gsub("[[:space:]]", "", as.character(fun)[3])
covs<-unlist(strsplit(covs, "+", fixed = TRUE))
#depth<-covs[length(covs)]
#covs<-covs[-length(covs)]
depth.fun<-depth.fun[[1]]
if(preProc==TRUE){
regdat[,c("altitude",contVar)]<-apply(regdat[,c("altitude",contVar)],2,scale)
}
if(depth.fun=="nspline"){fun <- as.formula(paste(tvar, "~" ,paste(c(covs,"ns(altitude,df=4)"), collapse="+"),sep=""))
} else {if(depth.fun =="poly") {fun <- as.formula(paste(tvar, "~" ,paste(c(covs,"poly(altitude,3,raw=TRUE)"), collapse="+"),sep=""))}
else {fun <- fun} # OVde treba ubaciti izbacivanje altituda kao main effect ako postoji poly i ns
}
modmat <- model.matrix(fun ,regdat)[,-1]
# removing nzv varaibles
nzv <- nearZeroVar(modmat)
if(sum(nzv)!=0){modmat <- modmat[, -nzv]}else{modmat<-modmat}
colnames(modmat)<-gsub(" ",".",colnames(modmat))
colnames(modmat)<-gsub("\\(altitude,.df.=.4\\)","",colnames(modmat))
colnames(modmat)<-gsub("\\(altitude,.3,raw=TRUE\\)","",colnames(modmat))
if(int & !hier){
X <- hierNet::compute.interactions.c(modmat,diagonal=FALSE)
if(depth.fun == "nspline"){columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude")) %>% select(-contains("ns"))  %>% colnames())
} else {if(depth.fun =="poly") {columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude")) %>% select(-contains("poly"))  %>% colnames())}
else {columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude"))  %>% colnames())}
}
if(depth.fun =="nspline"){modmat <- cbind((modmat %>% as.data.frame() %>% select(-altitude) %>% select(-contains("ns")) %>% as.matrix()),X[,colnames(X) %in% columns.to.keep],(modmat %>% as.data.frame() %>% select(contains("ns")) %>% as.matrix()))
} else {if(depth.fun =="poly") {modmat <- cbind((modmat %>% as.data.frame() %>% select(-altitude) %>% select(-contains("poly")) %>% as.matrix()),X[,colnames(X) %in% columns.to.keep],(modmat %>% as.data.frame() %>% select(contains("poly")) %>% as.matrix()))}
else {modmat <- cbind(modmat,X[,colnames(X) %in% columns.to.keep])}
}
} else { if(hier) {
X <- hierNet::compute.interactions.c(modmat,diagonal=FALSE)
"%ni%" <- Negate("%in%")
if(depth.fun == "nspline"){columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude")) %>% select(-contains("ns"))  %>% colnames())
} else {if(depth.fun == "poly") {columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude")) %>% select(-contains("poly"))  %>% colnames())}
else {columns.to.keep <- (X %>% as.data.frame() %>% select(contains("altitude"))  %>% colnames())}
}
X[,colnames(X) %ni% columns.to.keep ] <- 0
} else {
if(depth.fun =="nspline"){modmat <- cbind((modmat %>% as.data.frame() %>% select(-altitude) %>% as.matrix()))
} else {if(depth.fun =="poly") {modmat <- cbind((modmat %>% as.data.frame() %>% select(-altitude) %>% as.matrix()))}
else {modmat <- modmat}
}
}
}
if(!hier){
allData<-cbind(tvar=regdat[,paste(tvar)],modmat,regdat[,c("ID","longitude","latitude")])
#names(allData)<-gsub("\\(altitude,.df.=.4\\)","",names(allData))
results<-data.frame(lambda=rep(NA,length(flist)+1),RMSE=rep(NA,length(flist)+1),Rsquared=rep(NA,length(flist)+1))
coef.list=as.list(rep(NA,length(strat)))
pred<-data.frame()
for(i in 1:length(flist)){
ind<-which(allData$ID %in% do.call(c,flist[-i]))
TrainData<-as.data.frame(do.call(cbind,allData[ind,]))
Train.ID.index<-flist[-i]
TestData<-as.data.frame(do.call(cbind,allData[-ind,]))
Test.ID.Index<-flist[i]
folds1<-length(Train.ID.index)
folds.list1<-as.list(rep(NA,folds1))
names(folds.list1)<-paste("fold",c(1:folds1),sep = "")
foldid<-rep(NA,dim(TrainData)[1])
for(j in 1:length(Train.ID.index)){
folds.list1[[j]]<-which(TrainData$ID %in% Train.ID.index[[j]])
foldid[folds.list1[[j]]]<-j
}
TrainData<-TrainData[,1:(dim(TrainData)[2]-3)] # ovo mora da se menja...ne sme da stoji tri vec moraju da se uklone poslednje tri kolone lepse
TestData<-TestData[,1:(dim(TestData)[2]-3)]
#lambdaGrid <- seq(0,2.5,0.05)#10^seq(10,-2, length =100)
lasso.mod=cv.glmnet(as.matrix(TrainData[,-1]),TrainData[,1],alpha=1,lambda=lambda,foldid=foldid,type.measure="mse")
lasso.pred<-predict(lasso.mod,s=lasso.mod$lambda.min,newx=as.matrix(TestData[,-1]))
obs.pred<-data.frame(obs=TestData[,1],pred=as.numeric(lasso.pred))
coef.list[[i]]<-predict(lasso.mod,type="coefficients",s=lasso.mod$lambda.min)
dfresults<-data.frame(lambda=lasso.mod$lambda.min,RMSE=defaultSummary(obs.pred)[1],Rsquared=defaultSummary(obs.pred)[2])
results[i,]<-dfresults
pred<-rbind(pred,obs.pred)
}
results[length(flist)+1,]<-c(NA,RMSE=defaultSummary(pred)[1],Rsquared=defaultSummary(pred)[2])
coef.mat<-do.call(cbind,coef.list)
out<-list(measure=results,coef=coef.mat)
return(out)
}else{
allData<-cbind(tvar=regdat[,paste(tvar)],modmat,X,regdat[,c("ID","longitude","latitude")])
#names(allData)<-gsub("\\(altitude,.df.=.4\\)","",names(allData))
#head(allData)
results<-data.frame(lambda=rep(NA,length(flist)+1),RMSE=rep(NA,length(flist)+1),Rsquared=rep(NA,length(flist)+1))
coef.list=as.list(rep(NA,length(flist)))
pred<-data.frame()
for(i in 1:length(flist)){
ind<-which(allData$ID %in% do.call(c,flist[-i])) # izdvajaje indeksa instanci koje pribadaju foldovima za trening
TrainData<-as.data.frame(do.call(cbind,allData[ind,])) # izdvajanje trening podacima
Train.ID.index<-flist[-i] # Izdvajanje dela liste foldova sa  trening podacima
TestData<-as.data.frame(do.call(cbind,allData[-ind,])) #Izdvajanje test podataka
Test.ID.Index<-flist[i] # Izdvajanje dela liste foldova sa test podacima
folds1<-length(Train.ID.index) # duzina liste foldova sa trening podacima (tj. koliko foldova ide u tu listu)
folds.list1<-as.list(rep(NA,folds1)) # kreiranje prazne liste iste duzine
names(folds.list1)<-paste("fold",c(1:folds1),sep = "") # Nazivanje svakog clana liste po foldu...
foldid<-rep(NA,dim(TrainData)[1]) # kreiranje atributa koji ce nositi informaciju kom foldu pripada podatak
for(j in 1:length(Train.ID.index)){
folds.list1[[j]]<-which(TrainData$ID %in% Train.ID.index[[j]])
foldid[folds.list1[[j]]]<-j
}
trainx <- as.matrix(TrainData[,colnames(modmat)])
testx <- as.matrix(TestData[,colnames(modmat)])
trainzz <- as.matrix(TrainData[,colnames(X)])
testzz <- as.matrix(TestData[,colnames(X)])
trainy <- (TrainData[,"tvar"])
testy <- (TestData[,"tvar"])
fit = hierNet.path(trainx,trainy, zz = trainzz,diagonal=FALSE,strong=TRUE,trace=0)
fitcv = hierNet.cv(fit, trainx, trainy, folds=folds.list1, trace=0)
fit.def <- hierNet(trainx,trainy, zz = trainzz,diagonal=FALSE,strong=TRUE,lam=fit$lamlist[which(fitcv$lamhat==fit$lamlist)])
fit.pred <- predict(fit.def,newx=testx,newzz = testzz)
ie <- as.matrix(fit$th[,,which(fitcv$lamhat==fit$lamlist)][,length(colnames(modmat))])
me<-fit$bp[,which(fitcv$lamhat==fit$lamlist), drop = F] - fit$bn[,which(fitcv$lamhat==fit$lamlist), drop = F]
rbind(ie,me)
obs.pred <- data.frame(obs=testy,pred=fit.pred)
coef.list[[i]]<-rbind(ie,me)
dfresults<-data.frame(lambda=fitcv$lamhat,RMSE=defaultSummary(obs.pred)[1],Rsquared=defaultSummary(obs.pred)[2])
results[i,]<-dfresults
pred<-rbind(pred,obs.pred)
}
results[length(flist)+1,]<-c(NA,RMSE=defaultSummary(pred)[1],Rsquared=defaultSummary(pred)[2])
coef.mat<-do.call(cbind,coef.list)
out<-list(measure=results,coef=coef.mat)
return(out)
}
}
rez<-penint3D(fun=fun,regdat=regdat,hier = FALSE,lambda=10^seq(-5,5,length=110),contVar=contVar,int=FALSE,flist=flist,depth.fun="poly")
rez
fun<-as.formula(paste("As ~", paste(c(sm2D.lst,"altitude"), collapse="+")))
regdat<-bor.df
contVar<-sm2D.lst[-which(sm2D.lst %in% c("clc","SoilType"))]
targetVar<-"As"
rez<-penint3D(fun=fun,regdat=regdat,hier = FALSE,lambda=10^seq(-5,5,length=110),contVar=contVar,int=FALSE,flist=flist,depth.fun="poly")
rez
rezint<-penint3D(fun=fun,regdat=regdat,hier = FALSE,lambda=10^seq(-5,5,length=110),contVar=contVar,int=TRUE,flist=flist,depth.fun="poly")
rezint
summary(rezint$measure[1:6,])
str(gridmaps.sm2D)
fun
